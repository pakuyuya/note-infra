server {
    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;

    root /var/www/html
    index index.php index.html index.htm;

    # domain名。catch-All設定
    server_name _;

    # sslをON
    ssl on;

    # 有効なSSL protocolの指定
    # sslv3は Poodleでアウト。仕方ないね
    # tlsv1,tlsv1.1も厳密には影響受けるらしいけど鍵強度あげると安全？
    ssl_protocols    tlsv1 tlsv1.1 tlsv1.2;

    # 暗号化プロトコルの選択肢がいくつかある場合
    # ClientではなくServerが決定する
    SSLHonorCipherOrder On

    # 採用する暗号方式の種類
    # http://qiita.com/kuni-nakaji/items/5118b23bf2ea44fed96e
    # おもたくなりそう（未調査）
    ssl_ciphers ECDHE+RSAGCM:ECDH+AESGCM:
            DH+AESGCM:ECDH+AES256:DH+AES256:
            ECDH+AES128:DH+AES:
            !aNULL!eNull:!EXPORT:!DES:!3DES:!MD5:!DSS;
    
    # サーバー証明書の場所
    # ドメインも使えるみたい
    ssl_certificate     /usr/local/nginx/conf/cert.pem;

    # RSA暗号鍵の場所
    # ドメインも使えるみたい
    ssl_certificate_key /usr/local/nginx/conf/cert.key;

    # DH鍵交換に使うパラメータファイルの設定
    # opensslにdhparamを指定して生成する。今回は無効
    #ssl_dhparam /usr/local/nginx/conf/dhparam.pem

    # ヘッダに以下付与。
    # サーバー側からリダイレクトするよりセキュアにhttp→httpsリダイレクトするみたい
    # http側に書かなきゃ
    # add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';
    
    # php-frm用の設定
    # fast-cgiでphp-frm用のスクリプトに渡す
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        include fastcgi_params;
    }
    
    # キャッシュの有効期限
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        expires  7d;
    }
    
    # .ファイルへのアクセス禁止
    location ~ /\. {
        log_not_found off;
        deny all;
    }
    
    # ただしwell-knownは除く
    #  → Let's Encrypt
    location ^~ /.well-known {
        allow all;
        auth_basic off;
    }
}